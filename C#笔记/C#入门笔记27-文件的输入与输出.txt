一个 文件 是一个存储在磁盘中带有指定名称和目录路径的数据集合。当打开文件进行读写时，它变成一个 流。

从根本上说，流是通过通信路径传递的字节序列。有两个主要的流：输入流 和 输出流。输入流用于从文件读取数据（读操作），输出流用于向文件写入数据（写操作）。

C# I/O 类
System.IO 命名空间有各种不同的类，用于执行各种文件操作，如创建和删除文件、读取或写入文件，关闭文件等。

下表列出了一些 System.IO 命名空间中常用的非抽象类：

I/O 类	描述
BinaryReader	从二进制流读取原始数据。
BinaryWriter	以二进制格式写入原始数据。
BufferedStream	字节流的临时存储。
Directory	有助于操作目录结构。
DirectoryInfo	用于对目录执行操作。
DriveInfo	提供驱动器的信息。
File	有助于处理文件。
FileInfo	用于对文件执行操作。
FileStream	用于文件中任何位置的读写。
MemoryStream	用于随机访问存储在内存中的数据流。
Path	对路径信息执行操作。
StreamReader	用于从字节流中读取字符。
StreamWriter	用于向一个流中写入字符。
StringReader	用于读取字符串缓冲区。
StringWriter	用于写入字符串缓冲区。


FileStream 类
System.IO 命名空间中的 FileStream 类有助于文件的读写与关闭。该类派生自抽象类 Stream。

需要创建一个 FileStream 对象来创建一个新的文件，或打开一个已有的文件。创建 FileStream 对象的语法如下：

FileStream <object_name> = new FileStream( <file_name>,
<FileMode Enumerator>, <FileAccess Enumerator>, <FileShare Enumerator>);
例如，创建一个 FileStream 对象 F 来读取名为 sample.txt 的文件：
FileStream F = new FileStream("sample.txt", FileMode.Open, FileAccess.Read, FileShare.Read);

参数	描述
FileMode	

FileMode 枚举定义了各种打开文件的方法。FileMode 枚举的成员有：

Append：打开一个已有的文件，并将光标放置在文件的末尾。如果文件不存在，则创建文件。
Create：创建一个新的文件。如果文件已存在，则删除旧文件，然后创建新文件。
CreateNew：指定操作系统应创建一个新的文件。如果文件已存在，则抛出异常。
Open：打开一个已有的文件。如果文件不存在，则抛出异常。
OpenOrCreate：指定操作系统应打开一个已有的文件。如果文件不存在，则用指定的名称创建一个新的文件打开。
Truncate：打开一个已有的文件，文件一旦打开，就将被截断为零字节大小。然后我们可以向文件写入全新的数据，但是保留文件的初始创建日期。如果文件不存在，则抛出异常。
FileAccess	
FileAccess 枚举的成员有：Read、ReadWrite 和 Write。

FileShare	
FileShare 枚举的成员有：

Inheritable：允许文件句柄可由子进程继承。Win32 不直接支持此功能。
None：谢绝共享当前文件。文件关闭前，打开该文件的任何请求（由此进程或另一进程发出的请求）都将失败。
Read：允许随后打开文件读取。如果未指定此标志，则文件关闭前，任何打开该文件以进行读取的请求（由此进程或另一进程发出的请求）都将失败。但是，即使指定了此标志，仍可能需要附加权限才能够访问该文件。
ReadWrite：允许随后打开文件读取或写入。如果未指定此标志，则文件关闭前，任何打开该文件以进行读取或写入的请求（由此进程或另一进程发出）都将失败。但是，即使指定了此标志，仍可能需要附加权限才能够访问该文件。
Write：允许随后打开文件写入。如果未指定此标志，则文件关闭前，任何打开该文件以进行写入的请求（由此进程或另一进过程发出的请求）都将失败。但是，即使指定了此标志，仍可能需要附加权限才能够访问该文件。
Delete：允许随后删除文件。

StreamReader 和 StreamWriter 类用于文本文件的数据读写。这些类从抽象基类 Stream 继承，Stream 支持文件流的字节读写。

StreamReader 类
StreamReader 类继承自抽象基类 TextReader，表示阅读器读取一系列字符。

下表列出了 StreamReader 类中一些常用的方法：

序号	方法 & 描述
1	public override void Close()
关闭 StreamReader 对象和基础流，并释放任何与读者相关的系统资源。
2	public override int Peek()
返回下一个可用的字符，但不使用它。
3	public override int Read()
从输入流中读取下一个字符，并把字符位置往前移一个字符。


BinaryReader 和 BinaryWriter 类用于二进制文件的读写。

BinaryReader 类
BinaryReader 类用于从文件读取二进制数据。一个 BinaryReader 对象通过向它的构造函数传递 FileStream 对象而被创建。

下表列出了 BinaryReader 类中一些常用的方法：

序号	方法 & 描述
1	public override void Close()
关闭 BinaryReader 对象和基础流。
2	public virtual int Read()
从基础流中读取字符，并把流的当前位置往前移。
3	public virtual bool ReadBoolean()
从当前流中读取一个布尔值，并把流的当前位置往前移一个字节。
4	public virtual byte ReadByte()
从当前流中读取下一个字节，并把流的当前位置往前移一个字节。
5	public virtual byte[] ReadBytes( int count )
从当前流中读取指定数目的字节到一个字节数组中，并把流的当前位置往前移指定数目的字节。
6	public virtual char ReadChar()
从当前流中读取下一个字节，并把流的当前位置按照所使用的编码和从流中读取的指定的字符往前移。
7	public virtual char[] ReadChars( int count )
从当前流中读取指定数目的字节，在一个字符数组中返回数组，并把流的当前位置按照所使用的编码和从流中读取的指定的字符往前移。
8	public virtual double ReadDouble()
从当前流中读取一个 8 字节浮点值，并把流的当前位置往前移八个字节。
9	public virtual int ReadInt32()
从当前流中读取一个 4 字节有符号整数，并把流的当前位置往前移四个字节。
10	public virtual string ReadString()
从当前流中读取一个字符串。字符串以长度作为前缀，同时编码为一个七位的整数。

DirectoryInfo 类
DirectoryInfo 类派生自 FileSystemInfo 类。它提供了各种用于创建、移动、浏览目录和子目录的方法。该类不能被继承。

下表列出了 DirectoryInfo 类中一些常用的属性：

序号	属性 & 描述
1	Attributes
获取当前文件或目录的属性。
2	CreationTime
获取当前文件或目录的创建时间。
3	Exists
获取一个表示目录是否存在的布尔值。
4	Extension
获取表示文件存在的字符串。
5	FullName
获取目录或文件的完整路径。
6	LastAccessTime
获取当前文件或目录最后被访问的时间。
7	Name
获取该 DirectoryInfo 实例的名称。

